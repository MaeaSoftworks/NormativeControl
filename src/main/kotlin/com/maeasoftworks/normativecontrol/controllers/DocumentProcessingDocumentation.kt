package com.maeasoftworks.normativecontrol.controllers

import com.maeasoftworks.normativecontrol.daos.DocumentError
import com.maeasoftworks.normativecontrol.dtos.docs.BodyParam
import com.maeasoftworks.normativecontrol.dtos.docs.Documentation
import com.maeasoftworks.normativecontrol.dtos.docs.PossibleResponse
import com.maeasoftworks.normativecontrol.dtos.docs.PossibleResponseWithEnum
import com.maeasoftworks.normativecontrol.dtos.enums.State
import org.springframework.core.io.ByteArrayResource
import org.springframework.http.HttpStatus
import org.springframework.web.bind.annotation.*
import org.springframework.web.multipart.MultipartFile

@RequestMapping("documents")
interface DocumentProcessingDocumentation {


    @PostMapping("queue")
    @Documentation("Prepares slot in queue.")

    @PossibleResponse(
        HttpStatus.OK,
        String::class,
        "slot prepared",
        "<code>{ \"documentId\": <span class='var'>\$ID</span> }</code><br>where <span class='var'>\$ID</span> is document id that will be uploaded."
    )
    @PossibleResponse(HttpStatus.NOT_FOUND, description = "document not found")
    @PossibleResponse(HttpStatus.FORBIDDEN, description = "access key is invalid")
    fun addToQueue(
        @RequestParam("accessKey")
        @Documentation("key generated by client")
        accessKey: String
    ): Map<String, String>


    @GetMapping("state")
    @Documentation("Returns current state of document.")

    @PossibleResponseWithEnum(
        HttpStatus.OK,
        State::class,
        String::class,
        "JSON object with document state.",
        "<br><code>{ \"state\": <span class='var'>\$STATE</span> }</code><br>where <span class='var'>\$STATE</span> one of:"
    )
    @PossibleResponse(HttpStatus.NOT_FOUND, description = "document not found")
    @PossibleResponse(HttpStatus.FORBIDDEN, description = "access key is invalid")
    fun getState(
        @Documentation("document id")
        @RequestParam("documentId")
        documentId: String,

        @Documentation("key generated by client")
        @RequestParam("accessKey")
        accessKey: String
    ): Map<String, State>


    @PostMapping("upload")
    @Documentation("Uses to upload document to server. Restrictions: <ul><li><code>docx</code> format</li><li>20 MB</li></ul>")

    @PossibleResponse(HttpStatus.ACCEPTED, description = "file successfully processed")
    @PossibleResponse(HttpStatus.NOT_FOUND, description = "document not found")
    @PossibleResponse(HttpStatus.FORBIDDEN, description = "access key is invalid")
    @PossibleResponse(HttpStatus.BAD_REQUEST, description = "required arguments were empty")
    @PossibleResponse(HttpStatus.UNPROCESSABLE_ENTITY, description = "cannot process this document")
    fun uploadDocument(
        @Documentation("document id")
        @RequestParam("documentId")
        documentId: String,

        @Documentation("key generated by client")
        @RequestParam("accessKey")
        accessKey: String,

        @Documentation(".docx file that will be processed")
        @RequestParam("file")
        @BodyParam
        file: MultipartFile
    )


    @GetMapping("errors")
    @Documentation("Returns errors in file. Errors will only be returned if processing was successful.")

    @PossibleResponse(
        HttpStatus.OK,
        String::class,
        "array of Error objects",
        "<br><code>{ \"errors\": [<span class='var'>\$ERRORS</span>] }</code><br>where <span class='var'>\$ERRORS</span> is <a class='doc-link' href='/docs?section?Error'>Error</a> array."
    )
    @PossibleResponse(HttpStatus.NOT_FOUND, description = "document not found")
    @PossibleResponse(HttpStatus.FORBIDDEN, description = "access key is invalid")
    @PossibleResponse(HttpStatus.BAD_REQUEST, description = "required arguments were empty")
    @PossibleResponse(HttpStatus.UNPROCESSABLE_ENTITY, description = "cannot process this document")
    fun getErrors(
        @Documentation("document id")
        @RequestParam("documentId")
        documentId: String,

        @Documentation("key generated by client")
        @RequestParam("accessKey")
        accessKey: String
    ): Map<String, List<DocumentError>>


    @GetMapping("file")
    @Documentation("Returns processed file as ByteArrayResource. File will only be returned if processing was successful.")

    @PossibleResponse(HttpStatus.OK, ByteArrayResource::class, "file as array of bytes")
    @PossibleResponse(HttpStatus.NOT_FOUND, description = "document not found")
    @PossibleResponse(HttpStatus.FORBIDDEN, description = "access key is invalid")
    @PossibleResponse(HttpStatus.BAD_REQUEST, description = "required arguments were empty")
    @PossibleResponse(HttpStatus.UNPROCESSABLE_ENTITY, description = "cannot process this document")
    fun getFile(
        @Documentation("document id")
        @RequestParam("documentId")
        documentId: String,

        @Documentation("key generated by client")
        @RequestParam("accessKey")
        accessKey: String
    ): ByteArrayResource


    @GetMapping("drop-database")
    @ResponseStatus(HttpStatus.OK)
    @Documentation("Drops database (testing-only).")

    @PossibleResponse(HttpStatus.OK, description = "database is clear now")
    fun dropDatabase()
}
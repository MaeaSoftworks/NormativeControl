package com.maeasoftworks.normativecontrol.documentation

import com.maeasoftworks.normativecontrol.controllers.DocumentController
import com.maeasoftworks.normativecontrol.documentation.annotations.Documentation
import com.maeasoftworks.normativecontrol.documentation.annotations.PossibleResponse
import com.maeasoftworks.normativecontrol.entities.FileResponse
import com.maeasoftworks.normativecontrol.entities.MistakesResponse
import com.maeasoftworks.normativecontrol.entities.StatusResponse
import com.maeasoftworks.normativecontrol.parser.enums.Status
import com.maeasoftworks.normativecontrol.services.DocumentManager
import org.springframework.core.io.ByteArrayResource
import org.springframework.http.HttpStatus

sealed class DocumentDocs(d: DocumentManager) : DocumentController(d) {

    @Documentation("Returns current state of document.")
    @PossibleResponse(
        HttpStatus.OK,
        Status::class,
        "see <a class='doc-link' href='/docs?section=StateResponse'>StatusResponse</a>"
    )
    @PossibleResponse(HttpStatus.NOT_FOUND, description = "document not found")
    @PossibleResponse(HttpStatus.FORBIDDEN, description = "access key is invalid")
    abstract override fun getStatus(
        @Documentation("document id")
        documentId: String,
        @Documentation("key generated by client")
        accessKey: String
    ): StatusResponse

    @Documentation("Returns mistakes in file. Mistakes will only be returned if processing was successful.")
    @PossibleResponse(
        HttpStatus.OK,
        MistakesResponse::class,
        "see <a class='doc-link' href='/docs?section=MistakesResponse'>MistakesResponse</a>"
    )
    @PossibleResponse(HttpStatus.NOT_FOUND, description = "document not found")
    @PossibleResponse(HttpStatus.FORBIDDEN, description = "access key is invalid")
    @PossibleResponse(HttpStatus.BAD_REQUEST, description = "required arguments were empty")
    @PossibleResponse(HttpStatus.UNPROCESSABLE_ENTITY, description = "cannot process this document")
    abstract override fun getMistakes(
        @Documentation("document id")
        documentId: String,
        @Documentation("key generated by client")
        accessKey: String
    ): MistakesResponse

    @Documentation("Returns processed file as FileResponse. File will only be returned if processing was successful.")
    @PossibleResponse(
        HttpStatus.OK,
        FileResponse::class,
        "see <a class='doc-link' href='/docs?section=FileResponse'>FileResponse</a>"
    )
    @PossibleResponse(HttpStatus.NOT_FOUND, description = "document not found")
    @PossibleResponse(HttpStatus.FORBIDDEN, description = "access key is invalid")
    @PossibleResponse(HttpStatus.BAD_REQUEST, description = "required arguments were empty")
    @PossibleResponse(HttpStatus.UNPROCESSABLE_ENTITY, description = "cannot process this document")
    abstract override fun getFile(
        @Documentation("document id")
        documentId: String,
        @Documentation("key generated by client")
        accessKey: String
    ): FileResponse

    @Documentation("Returns processed file as ByteArrayResource. File will only be returned if processing was successful.")
    @PossibleResponse(HttpStatus.OK, ByteArrayResource::class, "file as array of bytes (can be null)")
    @PossibleResponse(HttpStatus.NOT_FOUND, description = "document not found")
    @PossibleResponse(HttpStatus.FORBIDDEN, description = "access key is invalid")
    @PossibleResponse(HttpStatus.BAD_REQUEST, description = "required arguments were empty")
    @PossibleResponse(HttpStatus.UNPROCESSABLE_ENTITY, description = "cannot process this document")
    abstract override fun getRawFile(
        @Documentation("document id")
        documentId: String,
        @Documentation("key generated by client")
        accessKey: String
    ): ByteArrayResource?
}